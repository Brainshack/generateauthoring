using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace SourceGenerator.Tests;

public class GenerateAuthoringTest
{
    private AuthoringCodeGenerator _generator;
    private CSharpGeneratorDriver _driver;
    private CSharpCompilation _compilation;
    private string _sourceComponentCode = @"using Unity.Entities;

namespace Test
{
    [Generators.GenerateAuthoring]
    public struct Timer : IComponentData
    {
        public float Duration;
    }
}";

    public GenerateAuthoringTest()
    {
        // Create an instance of the source generator.
        _generator = new AuthoringCodeGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        _driver = CSharpGeneratorDriver.Create(_generator);

        // We need to create a compilation with the required source code.
        _compilation = CSharpCompilation.Create("MyCoolAssembly",
            new[] { CSharpSyntaxTree.ParseText(_sourceComponentCode) },
            new[]
            {
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            });
    }
    
    [Fact]
    public void GeneratesAttribute()
    {
        var expectedAttributeOutput = @"// <auto-generated/>

namespace Generators
{
    [System.AttributeUsage(System.AttributeTargets.Struct)]
    internal class GenerateAuthoringAttribute : System.Attribute
    {
    }
}";

        var runResult = _driver.RunGenerators(_compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("GenerateAuthoringAttribute.g.cs"));

        // Complex generators should be tested using text comparison.
        Assert.Equal(expectedAttributeOutput, generatedFileSyntax.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }
    
    
    [Fact]
    public void GeneratesAuthoringMonobehaviour()
    {
        var expectedAuthoringCode = @"using Unity.Entities;
using UnityEngine;

namespace Test
{
    public class TimerAuthoring : MonoBehaviour
    {
        public float Duration;
    }
}";
        
        
        // Run generators and retrieve all results.
        var runResult = _driver.RunGenerators(_compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("TimerAuthoring.g.cs"));

        // Complex generators should be tested using text comparison.
        Assert.Equal(expectedAuthoringCode, generatedFileSyntax.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }    
    
}